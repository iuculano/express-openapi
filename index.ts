import express from 'express';
import { z } from 'zod';
import swaggerUi from 'swagger-ui-express';
import OpenApiValidator from 'express-openapi-validator';
import type { OpenAPIV3 } from 'express-openapi-validator/dist/framework/types';
import { createDocument, type ZodOpenApiPathsObject } from 'zod-openapi';

// Common error response schema.
export const httpError = z.object({
  error: z.object({
    code: z.number(),
    status: z.string(),
    message: z.string(),
    details: z.array(z.record(z.string(), z.unknown())).optional(),
  }).strict(),
}).strict();

export type HttpError = z.infer<typeof httpError>;


// The full shape of a user object.
const user = z.object({
  id: z.uuidv7(),
  name: z.string().min(1),
  email: z.email(),
  someParam: z.string().optional(),
}).meta({ id: 'User' });

// Don't need ID when creating a user as it's generated by the server.
// Base off the full user schema and just omit the ID.
const createUserBody = user.omit({ 
  id: true,
}).meta({ id: 'CreateUserBody', description: 'Payload to create a user' });

const getUserParams = z.object({
  id: z.uuidv7(),
}).meta({ id: 'GetUserParams' });


const createUserPath: ZodOpenApiPathsObject = {
  '/users': { // endpoint
    post: {   // method
      summary: 'Create a user',
      requestBody: {
        required: true,
        content: { 'application/json': { schema: createUserBody } },
      },
      responses: {
        '201': {
          description: 'Created user',
          content: { 'application/json': { schema: user } },
        },
        '400': { 
          description: 'Bad Request',
          content: { 'application/json': { schema: httpError } },
        },
      },
    },
  }
};

const getUserPath: ZodOpenApiPathsObject = {
  '/users/{id}': { // endpoint
    get: {    // method
      summary: 'Get a user by id',
      requestParams: { path: getUserParams },
      responses: {
        '200': {
          description: 'OK',
          content: { 'application/json': { schema: user } },
        },
        '404': { 
          description: 'Not Found',
          content: { 'application/json': { schema: httpError } },
        },
      },
    },
  }
};

const openapi = createDocument({
  openapi: '3.1.1',
  info: { title: 'Zod + zod-openapi + EOV', version: '1.0.0' },
  paths: {
    ...createUserPath,
    ...getUserPath,
  },
});

// -------------------------
// Express app
// -------------------------
const app = express();
app.use(express.json());

type User = z.infer<typeof user>;
const db = new Map<string, User>();

app.get('/openapi.json', (_, res) => res.json(openapi));
app.use('/docs', swaggerUi.serve, swaggerUi.setup(openapi));

app.use(
  OpenApiValidator.middleware({
    apiSpec: openapi as OpenAPIV3.DocumentV3,
    validateRequests: true,
    validateResponses: {
      onError: (error, body, req) => {
        console.log('Malformed response - this is likely a bug.', error);
      }
    },
  })
);

// Routes â€” no manual validation needed
app.post('/users', (req, res) => {
  const { name, email } = req.body as z.infer<typeof createUserBody>;
 
  const id = crypto.randomUUID();
  const user: User = { id, name, email };
  db.set(id, user);

  res.status(201).json(user);
});

app.get('/users/:id', (req, res) => {
  const { id } = req.params as z.infer<typeof getUserParams>;
  
  const user = db.get(id);
  
  // This doesn't match the schema and should log an error in the console.
  if (!user) {
    return res.status(404).json({ error: 'User not found' });
  }

  res.json(user);
});

// Standard error handler (EOV populates err.errors)
app.use((err: any, _req: express.Request, res: express.Response, _next: express.NextFunction) => {
  res.status(err.status || 500).json({ error: err.message, details: err.errors });
});

app.listen(3000, () => {
  console.log('API:  http://localhost:3000');
  console.log('Docs: http://localhost:3000/docs');
});
